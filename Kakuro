import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;


public class Kakuro {		

	 
	
	private static Cella[][] matrice;
	
	

	private static void iniz_matrice(){
		
		int i,j;
		
		matrice = new Cella[8][8];
		
		for (i=0;i<8;i++) {
			for (j=0;j<8;j++) {
				matrice[i][j] = new Bianca(matrice,i,j);
			}
			matrice [i][0] = new Nera(matrice,i,0);
			matrice [0][i] = new Nera(matrice,0,i);
		}
		
		matrice[3][1]=new Nera(matrice,3,1);
		matrice[4][1]=new Nera(matrice,4,1);
		matrice[3][2]=new Nera(matrice,3,2);
		matrice[6][3]=new Nera(matrice,6,3);
		matrice[7][3]=new Nera(matrice,7,3);
		matrice[1][4]=new Nera(matrice,1,4);
		matrice[4][4]=new Nera(matrice,4,4);
		matrice[7][4]=new Nera(matrice,7,4);
		matrice[1][5]=new Nera(matrice,1,5);
		matrice[2][5]=new Nera(matrice,2,5);
		matrice[5][6]=new Nera(matrice,5,6);
		matrice[4][7]=new Nera(matrice,4,7);
		matrice[5][7]=new Nera(matrice,5,7);
		
		iniz_vincoli();
				
	
	} 
	
	
	
	
	
		
	private static void iniz_vincoli() {
		// Verticali
		matrice[1][0].setVincoloVert(new Vincolo(23));
		matrice[2][0].setVincoloVert(new Vincolo(30));
		matrice[5][0].setVincoloVert(new Vincolo(27));
		matrice[6][0].setVincoloVert(new Vincolo(12));
		matrice[7][0].setVincoloVert(new Vincolo(16));
		matrice[4][1].setVincoloVert(new Vincolo(17));
		matrice[3][2].setVincoloVert(new Vincolo(15));
		matrice[6][3].setVincoloVert(new Vincolo(12));
		matrice[4][4].setVincoloVert(new Vincolo(7));
		matrice[7][4].setVincoloVert(new Vincolo(7));
		matrice[1][5].setVincoloVert(new Vincolo(11));
		matrice[2][5].setVincoloVert(new Vincolo(10));
		
		// Orizzontali
		matrice[0][1].setVincoloOriz(new Vincolo(16));
		matrice[4][1].setVincoloOriz(new Vincolo(24));
		matrice[0][2].setVincoloOriz(new Vincolo(17));
		matrice[3][2].setVincoloOriz(new Vincolo(29));
		matrice[0][3].setVincoloOriz(new Vincolo(35));
		matrice[1][4].setVincoloOriz(new Vincolo(7));
		matrice[4][4].setVincoloOriz(new Vincolo(8));
		matrice[2][5].setVincoloOriz(new Vincolo(16));
		matrice[0][6].setVincoloOriz(new Vincolo(21));
		matrice[5][6].setVincoloOriz(new Vincolo(5));
		matrice[0][7].setVincoloOriz(new Vincolo(6));
		matrice[5][7].setVincoloOriz(new Vincolo(3));

	}




	static class  MyComparator implements Comparator<Bianca> {
		public int compare(Bianca o1, Bianca o2) {
			// TODO Auto-generated method stub
			
			if (o1.getPriorita() < o2.getPriorita()) {
				return -1;
				} else if (o1.getPriorita() > o2.getPriorita()) {
				return 1;
				}
				else
			
			return 0;
		}

		    }
		

	
	public static void main(String [] args) {
		
		
		ArrayList<Bianca> celleBianche=new ArrayList<Bianca>();
		
		
		iniz_matrice();
	
		int i,j;
		
		for (i=1;i<8;i++) 
			for (j=1;j<8;j++) 
				if (matrice[j][i].isWhite()){
					matrice[j][i].calcPriorita();
					celleBianche.add( (Bianca) matrice[j][i]);
				}
		
		
		Collections.sort(celleBianche, new MyComparator());
		
		
		//for (Bianca s :celleBianche)
		//System.out.println(matrice[1][3].getVincoloVert().get_num_celle());
		Iterator<Bianca> iter = celleBianche.iterator();
		while(iter.hasNext()){
			
			Bianca variabile = iter.next();
			variabile.riduzione_dominio();
			
		}
		
		
		
		
		
	
	}















}
